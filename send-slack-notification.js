const https = require('https');

const SLACK_WEBHOOK_URL = process.env.SLACK_WEBHOOK_URL; // URL –≤–µ–±—Ö—É–∫–∞
const version = process.argv[2]; // –í–µ—Ä—Å–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
const repoUrl = process.argv[3]; // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

console.log("üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ Slack-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
console.log("üîπ –í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞:", version);
console.log("üîπ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:", repoUrl);
console.log("üîπ Webhook URL:", SLACK_WEBHOOK_URL ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

if (!SLACK_WEBHOOK_URL) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SLACK_WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.");
    process.exit(1);
}

const message = {
    text: `üöÄ –í—ã—à–µ–ª –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑: *v${version}* \nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–∏–∑](${repoUrl}/releases/tag/v${version})`
};

const requestData = JSON.stringify(message);

const requestOptions = new URL(SLACK_WEBHOOK_URL);
const req = https.request(
    {
        hostname: requestOptions.hostname,
        path: requestOptions.pathname,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(requestData),
        },
    },
    (res) => {
        let responseData = "";
        res.on("data", (chunk) => {
            responseData += chunk;
        });

        res.on("end", () => {
            console.log(`üîπ –û—Ç–≤–µ—Ç Slack: ${res.statusCode} ${responseData}`);
            if (res.statusCode === 200) {
                console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Slack.");
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${res.statusCode}`);
            }
        });
    }
);

req.on('error', (err) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
});

req.write(requestData);
req.end();
