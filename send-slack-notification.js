const https = require('https');
const { execSync } = require('child_process');

const SLACK_WEBHOOK_URL = process.env.SLACK_WEBHOOK_URL;
const version = process.argv[2]; // –í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞
const repoUrl = process.argv[3]; // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
const branch = process.env.GITHUB_REF?.replace("refs/heads/", "") || "main"; // –í–µ—Ç–∫–∞
const author = process.env.GITHUB_ACTOR || "Unknown"; // –ê–≤—Ç–æ—Ä —Ä–µ–ª–∏–∑–∞
const timestamp = new Date().toLocaleString("ru-RU", { timeZone: "UTC" }); // –í—Ä–µ–º—è —Ä–µ–ª–∏–∑–∞

if (!SLACK_WEBHOOK_URL) {
    console.error("‚ùå –û—à–∏–±–∫–∞: SLACK_WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω.");
    process.exit(1);
}

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ CHANGELOG.md (5 —Å—Ç—Ä–æ–∫)
let changelog = "";
try {
    changelog = execSync('head -n 5 CHANGELOG.md').toString().trim();
} catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CHANGELOG.md:", err.message);
}

// GitHub Diff –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ —Ç–µ–∫—É—â–∏–º —Ä–µ–ª–∏–∑–æ–º
const diffUrl = `${repoUrl}/compare/v${version.replace(/\.\d+$/, ".0")}...v${version}`;

const message = {
    text: `üöÄ *–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑:* *v${version}* \nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–∏–∑](${repoUrl}/releases/tag/v${version})`,
    attachments: [
        {
            color: "#36a64f",
            fields: [
                { title: "–í–µ—Ç–∫–∞", value: branch, short: true },
                { title: "–ê–≤—Ç–æ—Ä", value: author, short: true },
                { title: "–í—Ä–µ–º—è —Ä–µ–ª–∏–∑–∞", value: timestamp, short: true },
                { title: "–ò–∑–º–µ–Ω–µ–Ω–∏—è", value: changelog || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", short: false },
                { title: "GitHub Diff", value: `<${diffUrl}|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è>`, short: false }
            ]
        }
    ]
};

const requestData = JSON.stringify(message);

const requestOptions = new URL(SLACK_WEBHOOK_URL);
const req = https.request(
    {
        hostname: requestOptions.hostname,
        path: requestOptions.pathname,
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(requestData),
        },
    },
    (res) => {
        let responseData = "";
        res.on("data", (chunk) => {
            responseData += chunk;
        });

        res.on("end", () => {
            console.log(`üîπ –û—Ç–≤–µ—Ç Slack: ${res.statusCode} ${responseData}`);
            if (res.statusCode === 200) {
                console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Slack.");
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${res.statusCode}`);
            }
        });
    }
);

req.on('error', (err) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
});

req.write(requestData);
req.end();
