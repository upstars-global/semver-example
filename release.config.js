module.exports = {
    branches: ['main'], // –†–µ–ª–∏–∑–Ω—ã–µ –≤–µ—Ç–∫–∏
    preset: "conventionalcommits",
    plugins: [
        ['@semantic-release/commit-analyzer', {
            releaseRules: [
                { type: "fix", release: "patch" },
                { type: "perf", release: "patch" },
                { type: "feat", release: "minor" },
                { type: "minor", release: "minor" },
                { type: "refactor", release: "minor" },
                { type: "style", release: "minor" },
                { type: "docs", release: "minor" },
                { type: "test", release: "minor" },
                { type: "chore", release: "minor" },
                { breaking: true, release: "major" },
                { release: "patch" } // üîπ –ì–∞—Ä–∞–Ω—Ç–∏—è, —á—Ç–æ –ª—é–±–æ–π –∫–æ–º–º–∏—Ç –ø–æ–¥–Ω–∏–º–∞–µ—Ç PATCH
            ]
        }],
        ['@semantic-release/release-notes-generator', {
            preset: "conventionalcommits",
            writerOpts: {
                transform: (commit, context) => {
                    // ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∫–æ–º–º–∏—Ç–∞ –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                    const newCommit = { ...commit };

                    // –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø (fix, feat –∏ —Ç.–¥.), –ø–æ–º–µ—Å—Ç–∏–º –µ–≥–æ –≤ "üìå Other Changes"
                    if (!newCommit.type) {
                        newCommit.type = "other";
                    }
                    return newCommit;
                }
            },
            presetConfig: {
                types: [
                    { type: "fix", section: "üêõ Bug Fixes", hidden: false },
                    { type: "feat", section: "üöÄ Features", hidden: false },
                    { type: "chore", section: "üîß Maintenance", hidden: false },
                    { type: "docs", section: "üìñ Documentation", hidden: false },
                    { type: "style", section: "üíÖ Code Style", hidden: false },
                    { type: "refactor", section: "üî® Refactoring", hidden: false },
                    { type: "perf", section: "‚ö° Performance", hidden: false },
                    { type: "test", section: "üß™ Testing", hidden: false },
                    { type: "other", section: "üìå Other Changes", hidden: false }
                ]
            }
        }],
        '@semantic-release/changelog', // –û–±–Ω–æ–≤–ª—è–µ—Ç CHANGELOG.md
        ['@semantic-release/exec', {
            prepareCmd: 'node -e "let pkg=require(\'./package.json\'); pkg.version=\'${nextRelease.version}\'; require(\'fs\').writeFileSync(\'package.json\', JSON.stringify(pkg, null, 2));"',
            successCmd: 'node send-slack-notification.js "${nextRelease.version}" "${process.env.REPO_URL}"'
        }],
        ['@semantic-release/git', {
            assets: ['package.json', 'CHANGELOG.md'],
            message: 'chore(release): ${nextRelease.version} [skip ci]'
        }]
    ]
};
