module.exports = {
    branches: ['main'], // –†–µ–ª–∏–∑–Ω—ã–µ –≤–µ—Ç–∫–∏
    plugins: [
        ['@semantic-release/commit-analyzer', { // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞ —Å–¥–µ–ª–∞–Ω (major, minor, patch)
            releaseRules: [
                { type: "fix", release: "patch" },
                { type: "perf", release: "patch" },
                { type: "feat", release: "minor" },
                { type: "minor", release: "minor" },
                { type: "refactor", release: "minor" },
                { type: "style", release: "minor" },
                { type: "docs", release: "minor" },
                { type: "test", release: "minor" },
                { type: "chore", release: "minor" },
                { breaking: true, release: "major" }, // –õ–æ–º–∞—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Üí major
                { release: "patch" } // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–≥–¥–∞ patch
            ]
        }],
        ['@semantic-release/release-notes-generator', { // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç release notes
            preset: "conventionalcommits",
            presetConfig: {
                types: [
                    { type: "fix", section: "üêõ Bug Fixes", hidden: false },
                    { type: "feat", section: "üöÄ Features", hidden: false },
                    { type: "chore", section: "üîß Maintenance", hidden: false },
                    { type: "docs", section: "üìñ Documentation", hidden: false },
                    { type: "style", section: "üíÖ Code Style", hidden: false },
                    { type: "refactor", section: "üî® Refactoring", hidden: false },
                    { type: "perf", section: "‚ö° Performance", hidden: false },
                    { type: "test", section: "üß™ Testing", hidden: false },
                    { type: "*", section: "üìå Other Changes", hidden: false }
                ]
            }
        }],
        '@semantic-release/changelog', // –û–±–Ω–æ–≤–ª—è–µ—Ç CHANGELOG.md
        ['@semantic-release/exec', {
            prepareCmd: 'node -e "let pkg=require(\'./package.json\'); pkg.version=\'${nextRelease.version}\'; require(\'fs\').writeFileSync(\'package.json\', JSON.stringify(pkg, null, 2));"'
        }],
        ['@semantic-release/git', {
            assets: ['package.json', 'yarn.lock', 'CHANGELOG.md'],
            message: 'chore(release): ${nextRelease.version} [skip ci]'
        }]
    ]
};
